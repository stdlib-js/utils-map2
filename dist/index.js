"use strict";var c=function(a,r){return function(){return r||a((r={exports:{}}).exports,r),r.exports}};var F=c(function(yr,P){"use strict";var T=require("@stdlib/ndarray-base-vind2bind"),V="throw";function rr(a,r,e,u,v){var s,t,i,n,d,f,o,m,y,b,g,w,q,D,M,B,G,H,k,E,j,J,K,N,l;if(M=a.length,w=a.shape,q=r.shape,D=e.shape,s=a.data,t=r.data,i=e.data,B=a.strides,G=r.strides,H=e.strides,k=a.offset,E=r.offset,j=e.offset,n=a.order,d=r.order,f=e.order,o=a.accessors[0],m=r.accessors[0],y=e.accessors[1],b=a.ref,g=r.ref,w.length===0&&q.length===0){y(i,j,u.call(v,o(s,k),m(t,E),0,[b,g]));return}for(l=0;l<M;l++)J=T(w,B,k,n,l,V),K=T(q,G,E,d,l,V),N=T(D,H,j,f,l,V),y(i,N,u.call(v,o(s,J),m(t,K),l,[b,g]))}P.exports=rr});var I=c(function(br,Q){"use strict";function ar(a,r,e,u,v){var s,t,i,n,d,f,o;for(s=a.data,t=r.data,i=e.data,n=a.accessors[0],d=r.accessors[0],f=e.accessors[1],o=0;o<s.length;o++)f(i,o,u.call(v,n(s,o),d(t,o),o,[s,t]))}Q.exports=ar});var Z=c(function(gr,Y){"use strict";var U=require("@stdlib/assert-is-array-like-object"),W=require("@stdlib/assert-is-ndarray-like"),er=require("@stdlib/assert-is-function"),tr=require("@stdlib/array-base-zeros"),z=require("@stdlib/ndarray-base-ndarraylike2object"),O=require("@stdlib/array-base-arraylike2object"),nr=require("@stdlib/ndarray-zeros"),ir=require("@stdlib/ndarray-base-broadcast-shapes"),X=require("@stdlib/ndarray-base-maybe-broadcast-array"),p=require("@stdlib/string-format"),sr=F(),ur=I();function or(a,r,e,u){var v,s,t,i,n;if(!er(e))throw new TypeError(p("invalid argument. Second argument must be a function. Value: `%s`.",e));if(v=W(a),s=W(r),v){if(!s)throw new TypeError(p("invalid argument. If the first input array is an ndarray, the second input array must also be an ndarray. Value: `%s`.",r));if(n=ir([a.shape,r.shape]),n===null)throw new Error("invalid arguments. Input ndarrays must be broadcast compatible.");return i=z(X(a,n)),i.ref=a,a=i,i=z(X(r,n)),i.ref=r,r=i,t=nr(n,{dtype:"generic",order:a.order}),sr(a,r,z(t),e,u),t}if(U(a)){if(s||!U(r))throw new TypeError(p("invalid argument. If the first input array is an array-like object, the second input array must also be an array-like object. Value: `%s`.",r));if(r.length!==a.length)throw new RangeError("invalid arguments. Input arrays must have the same length.");return t=tr(a.length),ur(O(a),O(r),O(t),e,u),t}throw new TypeError(p("invalid argument. First argument must be an array-like object or an ndarray. Value: `%s`.",a))}Y.exports=or});var A=c(function(wr,$){"use strict";var L=require("@stdlib/assert-is-array-like-object"),R=require("@stdlib/assert-is-ndarray-like"),vr=require("@stdlib/assert-is-function"),S=require("@stdlib/ndarray-base-ndarraylike2object"),C=require("@stdlib/array-base-arraylike2object"),_=require("@stdlib/ndarray-base-maybe-broadcast-array"),dr=require("@stdlib/ndarray-base-assert-is-read-only"),h=require("@stdlib/string-format"),lr=F(),hr=I();function fr(a,r,e,u,v){var s,t,i,n,d;if(!vr(u))throw new TypeError(h("invalid argument. Fourth argument must be a function. Value: `%s`.",u));if(s=R(a),t=R(r),i=R(e),s){if(!t)throw new TypeError(h("invalid argument. If the first input array is an ndarray, the second input array must also be an ndarray. Value: `%s`.",r));if(!i)throw new TypeError(h("invalid argument. If the input arrays are ndarrays, the output array must also be an ndarray. Value: `%s`.",e));if(dr(e))throw new Error("invalid argument. The output ndarray must be writable. Cannot write to a read-only ndarray.");return e=S(e),d=e.shape,n=S(_(a,d)),n.ref=a,a=n,n=S(_(r,d)),n.ref=r,r=n,lr(a,r,e,u,v),e.ref}if(L(a)){if(t||!L(r))throw new TypeError(h("invalid argument. If the first input array is an array-like object, the second input array must also be an array-like object. Value: `%s`.",r));if(i||!L(e))throw new TypeError(h("invalid argument. If the input arrays are array-like objects, the output array must also be an array-like object. Value: `%s`.",e));if(a.length!==r.length||r.length!==e.length)throw new RangeError("invalid arguments. Input and output arrays must have the same length.");return hr(C(a),C(r),C(e),u,v),e}throw new TypeError(h("invalid argument. First argument must be an array-like object or an ndarray. Value: `%s`.",a))}$.exports=fr});var cr=require("@stdlib/utils-define-nonenumerable-read-only-property"),x=Z(),pr=A();cr(x,"assign",pr);module.exports=x;
/**
* @license Apache-2.0
*
* Copyright (c) 2022 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
//# sourceMappingURL=index.js.map
